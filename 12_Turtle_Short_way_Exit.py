import turtle
from collections import deque
import time

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
OBSTACLE = 'X'
PART_OF_PATH = 'P'
TRIED = 'T'
EXIT = 'E'
START = 'S'
EMPTY = ' '

class MazeData:
    """ ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï """
    def __init__(self):
        self.maze = [
            ["X", "X", "X", "X", "X", "X", "X"],
            ["X", "S", " ", " ", "X", " ", "X"],
            ["X", " ", "X", " ", "X", " ", "E"],
            ["X", " ", "X", " ", "X", " ", "X"],
            ["X", " ", "X", " ", " ", " ", "X"],
            ["X", " ", "X", "X", "X", "X", "X"],
        ]
    
    def get_maze(self):
        """ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï """
        return self.maze

class Maze:
    def __init__(self, draw_speed=10):
        """ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡∏à‡∏≤‡∏Å MazeData """
        maze_data = MazeData()
        self.maze_list = maze_data.get_maze()
        self.start_position = None
        self.exit_position = None

        for row_index, row in enumerate(self.maze_list):
            for col_index, cell in enumerate(row):
                if cell == START:
                    self.start_position = (row_index, col_index)
                elif cell == EXIT:
                    self.exit_position = (row_index, col_index)

        self.rows = len(self.maze_list)
        self.cols = len(self.maze_list[0])

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Turtle
        self.t = turtle.Turtle(shape='turtle')
        self.t.speed(draw_speed)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        turtle.setup(width=600, height=600)
        turtle.setworldcoordinates(-0.5, -self.rows + 0.5, self.cols - 0.5, 0.5)

        self.t.up()

    def draw_maze(self, fast=False):
        """ ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà """
        for y in range(self.rows):
            for x in range(self.cols):
                if self.maze_list[y][x] == OBSTACLE:
                    self.draw_box(x, -y, 'tan')
                elif self.maze_list[y][x] == EXIT:
                    self.draw_box(x, -y, 'yellow')
                elif self.maze_list[y][x] == START:
                    self.draw_box(x, -y, 'blue')

                if fast:
                    time.sleep(0.01)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

    def draw_box(self, x, y, color):
        """ ‡πÄ‡∏ï‡πà‡∏≤‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á x, y """
        self.t.up()
        self.t.goto(x, y)
        self.t.down()
        self.t.color('black', color)
        self.t.begin_fill()
        for _ in range(4):
            self.t.forward(1)
            self.t.right(90)
        self.t.end_fill()

    def move_turtle(self, row, col):
        """ ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πà‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á row, col """
        self.t.up()
        self.t.goto(col, -row)
        self.t.down()

    def drop_bread_crumb(self, color):
        """ ‡∏ß‡∏≤‡∏á‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô """
        self.t.dot(10, color)

    def update_position(self, row, col, val=None):
        """ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ """
        if val:
            self.maze_list[row][col] = val
        self.move_turtle(row, col)

        color_mapping = {
            PART_OF_PATH: 'green',
            OBSTACLE: 'red',
            TRIED: 'gray'
        }
        color = color_mapping.get(val, None)
        if color:
            self.drop_bread_crumb(color)

    def is_exit(self, row, col):
        """ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà """
        return self.maze_list[row][col] == EXIT

    def __getitem__(self, idx):
        """ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡∏ú‡πà‡∏≤‡∏ô index ‡πÑ‡∏î‡πâ """
        return self.maze_list[idx]

    def display_success_message(self):
        """ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å """
        self.t.up()
        self.t.goto(0, 0)  # ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå
        self.t.color('green')
        self.t.write("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ! ‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß! üéâ", align="center", font=("Arial", 16, "bold"))

# -----------------------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ BFS
# -----------------------------------------------

def bfs_search(maze):
    """ ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏° BFS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï """
    queue = deque()
    visited = set()
    predecessors = {}

    start_row, start_col = maze.start_position  # ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "S"
    queue.append((start_row, start_col))
    visited.add((start_row, start_col))
    maze.update_position(start_row, start_col, TRIED)

    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # ‡∏Ç‡∏∂‡πâ‡∏ô, ‡∏•‡∏á, ‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡∏ß‡∏≤

    while queue:
        row, col = queue.popleft()

        if maze.is_exit(row, col):
            print("üéâ ‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...")
            reconstruct_path(maze, predecessors, row, col)
            maze.display_success_message()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ
            return True

        for dr, dc in directions:
            new_row, new_col = row + dr, col + dc

            if (0 <= new_row < maze.rows and 0 <= new_col < maze.cols and
                    (new_row, new_col) not in visited and maze[new_row][new_col] != OBSTACLE):

                queue.append((new_row, new_col))
                visited.add((new_row, new_col))
                predecessors[(new_row, new_col)] = (row, col)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                maze.update_position(new_row, new_col, TRIED)
                time.sleep(0.05)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô

    print("üö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å!")
    return False

def reconstruct_path(maze, predecessors, row, col):
    """ ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô """
    path = []
    while (row, col) in predecessors:
        path.append((row, col))
        row, col = predecessors[(row, col)]

    path.reverse()  # ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á

    for row, col in path:
        maze.update_position(row, col, PART_OF_PATH)
        time.sleep(0.05)  # ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô

# -----------------------------------------------
# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Maze ‡πÅ‡∏•‡∏∞ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
# -----------------------------------------------

def main():
    my_maze = Maze(draw_speed=5)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà

    # ‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    found_exit = False
    for y in range(my_maze.rows):
        for x in range(my_maze.cols):
            if my_maze.maze_list[y][x] == EXIT:
                found_exit = True
                break
        if found_exit:
            break

    if not found_exit:
        print("üö∂‚Äç‚ôÇÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏ï‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à...")
        my_maze.draw_maze(fast=True)  # ‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
    else:
        print("üßê ‡∏û‡∏ö‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å, ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!")
        my_maze.draw_maze(fast=False)  # ‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ä‡πâ‡∏≤
        bfs_search(my_maze)  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ BFS

    turtle.done()

if __name__ == "__main__":
    main()
